<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		  http://www.springframework.org/schema/beans/spring-beans.xsd
      	  http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd">


	<security:http security="none" pattern="/session*"></security:http>
	<security:http security="none" pattern="/login.jsp"></security:http>
	<security:http security="none" pattern="/login_error.jsp"></security:http>
	<security:http security="none" pattern="/login_fail.jsp"></security:http>
	<security:http security="none" pattern="/custom/**"></security:http>
	<security:http security="none" pattern="/third/**"></security:http>
	<security:http security="none" pattern="/app/front/**"></security:http>


	<security:http auto-config="false" use-expressions="false" >
	<!-- 改为数据库获取权限后，这里没有用了，登录会重定向，改为配置到外面就可以了 	
	
		<security:intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<security:intercept-url pattern="/login_fail.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<security:intercept-url pattern="/login_error.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<security:intercept-url pattern="/session_timeout.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<security:intercept-url pattern="/admin_mgr.jsp" access="ROLE_ADMIN" />
		<security:intercept-url pattern="/user/**" access="ROLE_ADMIN" />
		<security:intercept-url pattern="/app/mgr/**" access="ROLE_USER" /> -->
		
	   <!-- 登陆管理
	   		authentication-success-handler-ref 会覆盖default-target-ur的设定 
	   		authentication-failure-handler-ref 会覆盖authentication-failure-url的设定 
	   -->
<!-- 		authentication-success-handler-ref="customAuthenticationSuccessHanlder" -->
<!-- 		authentication-failure-handler-ref="customAuthenticationFailureHanlder" -->
		<security:form-login  login-page="/login.jsp" 
							  login-processing-url="/login.action"
							  username-parameter="username"
							  password-parameter="password"
							  default-target-url="/app/mgr/index"
							  authentication-failure-url="/login.jsp?ERROR_LOGIN_PASSWORD_OR_ACCOUNT=159268452"
							  />
		<!-- 在退出登陆时，删除对应的session信息，避免session信息失效后重新登录，任然会使用之前的sessionid进行验证请求，会报告session超时 -->
		<security:logout invalidate-session="true" logout-url="/logout"  delete-cookies="JSESSIONID"/>
		<security:csrf disabled="true"/>
		
		<!-- session 管理 ，配置session失效的跳转页面-->
		<security:session-management invalid-session-url="/session_timeout.jsp" 
									 session-authentication-error-url="/session_error.jsp">
			<!-- 一次只能登录一个用户
				需要在web.xml中配置监听器：
				<listener>
			   		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
			    </listener>
		    
		   		 配置error-if-maximum-exceeded=true，再次登陆会被拒绝，跳转至登录时设置的authentication-failure-url
		   		 如果使用remember-me功能进行再次登录时，不会转到authentication-failure-url，而是向客户端返回未授权的401码，但是我们
		   		也可以指定跳转的页面，通过 session-authentication-error-url指定。
		   		
		   		注意：我们配置的错误跳转页面等需要配置不受security的管理,即通过 http 元素设置其 secure=”none”
		   		
			 -->
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
		</security:session-management>
		
		
		<security:custom-filter ref="myfilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		
	</security:http>

	<security:authentication-manager alias="authmanager">
		
		<!-- 改变认证的数据来源 -->
		<security:authentication-provider user-service-ref="customUserService">
			<security:password-encoder base64="true" hash="md5">
				<security:salt-source user-property="username"/>
			</security:password-encoder>
		</security:authentication-provider>
		
		
		<!-- <security:authentication-provider>
			<security:jdbc-user-service data-source-ref="" role-prefix=""
									    authorities-by-username-query=""
									    group-authorities-by-username-query=""
									    users-by-username-query=""/>
		</security:authentication-provider> -->
		
		<!-- 改变验证的方式 -->
		<!-- <security:authentication-provider ref="customAuthenticationProvider" >
		</security:authentication-provider> -->
		
		
		<!-- 指定登录的用户，固定的 -->
		<!-- 		
		<security:authentication-provider >
			<security:user-service>
				<security:user name="user" password="password" authorities="ROLE_USER" />
				<security:user name="admin" password="admin" authorities="ROLE_USER,ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider> -->
	</security:authentication-manager>

	<bean id="customAuthenticationSuccessHanlder" class="com.shark.ocean.security.CustomAuthenticationSuccessHanlder"></bean>
	<bean id="customAuthenticationFailureHanlder" class="com.shark.ocean.security.CustomAuthenticationFailureHanlder"></bean>

	<bean id="customAuthenticationProvider" class="com.shark.ocean.security.CustomAuthenticationProvider"></bean>
	<bean id="customUserService" class="com.shark.ocean.security.CustomUserJdbcService">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="myfilter" class="com.shark.ocean.security.CustomFilterSecurityInterceptor">
		<property name="authenticationManager" ref="authmanager"></property>
		<property name="accessDecisionManager" ref="customAccessDecisionManager"></property>
		<property name="securityMetadataSource" ref="customMetadataSourceService"></property>
	</bean>
	
	<bean id="customAccessDecisionManager" class="com.shark.ocean.security.CustomAccessDecisionManager"></bean>
	<bean id="customMetadataSourceService" class="com.shark.ocean.security.MyInvocationSecurityMetadataSourceService">
		<constructor-arg  name="systemRightService" ref="systemRightService"></constructor-arg>
	</bean>
	
	
</beans>